---
- hosts: local
  collections:
    - community.kubernetes
  tasks:
  - name: Check mandatory variables
    fail:
      msg: Variable {{ item }} was not provided
    when: vars[item] is undefined
    loop:
    - env

  - name: Load {{ env }} variables files
    include_vars:
      dir: "{{ inventory_dir }}/{{ env }}"
      depth: 1
      extensions:
      - yaml
      - yml

  - name: Ensure Jenkins helm dependencies are in place
    k8s:
      state: present
      definition: "{{ lookup('template', '{{ files }}/prerequisites.template.yaml') }}"
      validate:
        fail_on_error: true
        strict: true

  - name: Ensure Jenkins CN={{ jenkins_ingress }} is present
    block:
    - name: Ensure Jenkins CN={{ jenkins_ingress }} is present
      include_role:
        name: create_certificate
      vars:
        certificate_def:
          cn: "{{ jenkins_ingress }}"
    become: true
  - name: Ensure TLS Secret {{ jenkins_ingress }} is present in namespace {{ namespace }}
    k8s:
      state: present
      definition:
        apiVersion: "v1"
        kind: Secret
        metadata:
          name: "{{ jenkins_ingress }}"
          namespace: "{{ namespace }}"
        data:
          tls.crt: "{{ tls.crt}}"
          tls.key: "{{ tls.key}}"
        type: kubernetes.io/tls
    no_log: true

  - name: Deploy latest version of Jenkins chart inside {{ namespace }} namespace
    helm:
      name: "{{ namespace }}"
      chart_ref: stable/jenkins
      release_namespace: "{{ namespace }}"
      values: "{{ lookup('template', '{{ files }}/jenkins_helm.template.yaml') | from_yaml }}"

  - name: Ensure Jenkins Deployment finishes
    k8s:
      name: "{{ namespace }}-jenkins"
      api_version: v1
      kind: Deployment
      state: present
      namespace: "{{ namespace }}"
      wait: true
      wait_timeout: 300

  - name: Ensure Jenkins Ingress DNS is resolvable locally
    shell: |
      while [ -z "$(kubectl get ingress {{ namespace }}-jenkins -n {{ namespace }} -o jsonpath="{.status..ip}" | xargs)"  ]; do
        sleep 1;
        echo "Awaiting for LoadBalancer for Ingress..."
      done
      INGRESS_IP=`kubectl get ingress {{ namespace }}-jenkins -n {{ namespace }} -o jsonpath="{.status..ip}"`
      CHANGED=`grep -c "${INGRESS_IP} {{ jenkins_ingress }}" /etc/hosts`
      [ "${CHANGED}" -eq 0 ]  && echo "update hosts" && sudo -E sh -c "echo \"${INGRESS_IP} {{ jenkins_ingress }}\" >> /etc/hosts" || echo "hosts already present"
    register: hosts_result
    changed_when: '"update hosts" in hosts_result.stdout'
